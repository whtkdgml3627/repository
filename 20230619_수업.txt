0619 수업 메모

첨부파일
업로드 하는 방법 (2가지 방식)
서버쪽에서 신경써야할 부분
- 확장자 체크 필수
- 파일 이름 중복 체크 (이름이 같으면 덮어씀)
- 저장경로 (폴더에 저장 가능한 파일 개수가 정해져있음 / 폴더에 파일이 많으면 찾는데 시간이 오래걸림)
- 다운로드
   - 운영서버 내에서 다운로드
   - 별도의 서버를 두는 방식 (더 나은 방법) / 보안 관련 문제점 발생
- img태그로 이미지 출력
- Tomcat8 -> 서블릿3.0 부터 파일 업로드 지원
- enctype="multipart/form-data"
- enctype을 쓰게 되면 데이터를 전송하는 방식 자체가 달라짐

자주 사용하는 웹서버
Apache, Nginx

1. form태그 이용
- 과거에 많이 사용하던 방식
- input type file로 사용
- 1개의 파일밖에 사용하지 못했으나 현재는 multiple로 여러가지 업로드 가능해짐

장점
- 구현이 간단함
- ui가 간단함
- 초보자에게 적합한 방식

단점
- 선택한 파일을 전송할 때 까지 파일을 알지 못하여 피드백 못함
- submit을 날려야지만 처리가 가능
- 에디터 사용 불가 (FCKEditor)

2. ajax로 이용
- 주로 modal창을 이용함
- submit따로, file upload 따로 시점이 다름
- 첨부파일 추가하면 바로보기 기능이 들어감
- 배치 프로그램을 돌림

장점
- WYSWYG (직관적임)
- 다양하게 적용이 가능함

단점
- 구현이 어려움
- 서버에 올라간 파일에 대한 관리를 해주어야함
- submit하지 않아도 업로드한 파일이 삭제되지 않음

.do를 사용했던 이유
서버쪽에서 web server를 호출해야 되는지 was를 호출해야 되는지 알기 쉽게 확장자를 써줬던 거임
.do면 was를 호출해라

파일 업로드하기 위해 필요한 설정
application.properits에 설정 추가
thumbnailator 추가
https://mvnrepository.com/artifact/net.coobird/thumbnailator/0.4.19
uuid(난수)

UpDownController - @RestController


다운로드
1. 직접 was에서 다운로드
- 퍼포먼스가 안좋음


심볼릭 링크 (Symbolic)
- 네트워크 드라이브
- 가장 쉽게 막는 보안은 Referer을 체크
- csrf - spring 시큐리티
- token 인증 추가
- nginx 서버를 처음 사용해서 코드가 들어가있지 않은 상태


포트폴리오
상품의 이미지로 파일 업로드

키오스크 연습 - 상품 클릭시 상품비동기로 추가 되게

파일업로드 단계
파일업로드 확인, 파일 조회, 파일 삭제
ajax 업로드는 FormData속성을 이용
1. 파일업로드 과정을 설명해라
2. 파일서버를 구성한 이유 다운로드 원리
3. Axios를 이용한 업로드 설명

=================================================================================================================================
[첨부파일]
- 첨부파일 추가 방법
1. 폼 태그 -> 과거에 많이 쓰던 방식 
<form>
<input type="file"> -> 1개의 파일밖에 사용되지 못함 -> html5로 넘어오면서 multiple 속성 사용
</form>
- 장점: 구현 간단(=UI가 간단) -> 초보자에게 적합
- 단점: 내가 선택한 첨부파일에 대한 피드백X, submit을 날려야지만 처리됨 -> 잘못된 파일을 올렸을 때 즉시 확인 불가능,
	에디터 사용 불가(FCK Editor)

2. ajax
주로 modal 창 이용 -> 1. file upload 따로, 2. submit 따로 --> 시점이 다름 => 바로보기 사용 가능
- 장점: WYSWYG(When You See When You Get), 다양한 적용
- 단점: 구현 난이도 올라감, 파일 관리 필요


<서버 측에서 파일 업로드 시 체크해야 할 것>
파일 -> 확장자 검증, 파일 이름 중복 -> 덮어쓰기, 저장 경로, 
       ★다운로드 -> 1. 운영 서버 내에 다운로드 
		    2. 별도의 서버 (보안) -> web server (Apache, Nginx)
	 / <img src="">

<form encType="multipart/form-data>

====================================================================================================

c: upload 파일 생성 -> github/ckck24/PART7 -> src -> main ->resources -> properties에 마지막 4줄 붙여넣기

https://github.com/coobird/thumbnailator
https://mvnrepository.com/artifact/net.coobird/thumbnailator
-> 0.4.19 ver Gradle 복사 -> build.gradle 붙여넣기
Postman 사용해서 확인
Post -> Headers -> key: Content-type value: multipart
body -> text -> key:file value: 이미지파일업로드 => send

*FileCopyUtils
*Stream을 쓰면 퍼포먼스는 더 좋지만, close는 항상 염두에 둬야 함
*UUID

#thumbnail

업로드 시
-업로드 파일 이름: UUID_파일이름
-> 이미지 파일 여부

====================================================================================================

<업로드 파일 다운로드>
WAS에서 다운로드 -> 퍼포먼스 떨어짐

<img src="경로">

*Nginx 80 포트로 
c드라이브에 webserver 폴더 생성
-> http://nginx.org/en/download.html
->	nginx/Windows-1.24.0 다운로드(안정화버전)
-> conf -> nginx.conf vscode로 열기 포트, 로컬 확인
-> cmd 명령어 입력
-> http://localhost 입력하면 nginx 창 뜸
-> webserver -> html -> 이미지 파일 넣고 -> http://localhost.파일이름.확장자 경로 사용하면 바로 이미지 뜸
-> properties에 경로 2개를 html 경로로 바꿔주기(window는 역슬래시 2개로 넣는 게 안전)
-> (nginx는 구동중) postman으로 파일 업로드 -> nginx폴더 확인 -> 브라우저에서도 뜨는지 확인

*업로드는 WAS / 다운로드, 조회는 별도의 서버(nginx)에서 합시다.
-> 장점: WAS 과부하 줄어듦


====================================================================================================

<심볼릭 링크(Symbolic Link)>
네트워크 드라이브: 내 PC의 폴더를 다른 PC의 D드라이브에 거는 것 같은..?
-추가로 공부하면 좋음
(보안 체크)
referer: 어디서부터 이걸 호출했는지 확인하는 곳
-> 반드시 우리 사이트에서만 봤어야 함, 경로가 다르다면 불법적인 행위라고 간주 -> 막음

*JWT -> 토큰 베이스 인증

====================================================================================================

<axios 이용 파일 업로드>

axios 라이브러리 추가
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
</script>
FormData : 디버깅이 어려움 


이미지의 확장자를 체크하는 정규표현식 <- chatGPT 이용
 

-비동기 통신 axios.post.then.catch
-javascript for in / for of <- 확인

-em / rem <- 확인


동적으로 만들면 addEventListner를 걸 수 없음
1. 실제로 이벤트가 걸려 있는 걸 찾아서 걸어야 함
2. onclick 이벤트를 직접 거는 방식
